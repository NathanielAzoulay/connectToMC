public with sharing class DhlIntegration extends CarrierClass {
    public override void createLabel(List<Shippment_Mapping__mdt> shipingMetadataList, List<Shipment_Item__mdt> shipingItemMetadataList, String carrierService, String fulfillmentId, String shipmentId) { 
		//Get Metadata
		List<Shipment> shipmentOrder = listShipmentMetadata(shipingMetadataList, shipmentId); 
		List<ShipmentItem> shipmentItemOrder = listShipmentItemMetadata(shipingItemMetadataList, shipmentId); 
 
		//Call logic
		String requestBody = DhlInternationalLabel(shipingMetadataList, shipingItemMetadataList, shipmentOrder,  shipmentItemOrder);
 
		//Call WS
		HTTPResponse responseHttp = callWebService(requestBody); 

		// Traitement 
		processResponse(responseHttp, shipmentOrder, shipmentId);
	}
    public String DhlInternationalLabel(List<Shippment_Mapping__mdt> shipingMetadataList, List<Shipment_Item__mdt> shipingItemMetadataList, List<Shipment> shipmentOrder,  List<ShipmentItem> shipmentItemOrder) {
        String contentText = '';
        String signatureText = 'iVBORw0KGgoAAAANSUhEUgAAAX0AAACECAMAAABLTQsGAAAAilBMVEX///8AAAD5+fn8/Pz19fXt7e3y8vLm5ubq6urX19fj4+Pw8PD09PTS0tLMzMzJycljY2OdnZ1XV1eoqKiLi4sVFRUzMzNNTU0jIyPBwcFUVFSWlpYQEBCxsbEtLS25ublycnI8PDyDg4NERERgYGAeHh56enpzc3OOjo6hoaEoKCirq6tHR0eFhYWtsi5uAAASpElEQVR4nO1d62KiOhBuQBSoKHhHUEAERev7v97JTFAIBKStWjzL92e3ipBMJnPP8PHxJCgB2XwM+8+6fYc69ExCNrZpDv56IP8kbEIOHiHE++uB/JPYktN5QYhr/PVA/kWMCTF1Sv3FXw/kfwNZUXVd1xC6PlCHNddSqZ8MAkL0l43u/wzdPjvxJIzIDYvQPCa2Ir5co2zv+yRqt9TXe389gvuQJfuw3LpEhPlib8uC32zody4J1JcP9htQ96dtyw3i3mgzKdE8CigW17/CcelXUkw/3yaidWkN9CUd4+GvR1EH1drzPD83Z2PDoFKfwjDi9MuyfJkRMmu5yAfik2Wd7vpTKOM812+XB6tsPU5X+OXoD4b3Sxxx4KeWGsTqdJmRfm15miS8zJvD9/5Lh/YIGMx+WLWSb4bWNhM23qBGOZl4zetG9hjIPh31ZdFK6g+cK+mXF/vOtQmKpZcM64HQ6KDPVPq0kPrHMKX9bnTfZJzChfELRvVQmKhwY7JtmdzveafUkNw0MhhncK327FE9GHoErC8tSVjhLf4RjD2j/cRu5gf2QTf7b+AzcgBxSb2SFZn89Ug4xMwUOHlN6QnzmL8b6w+p4NlT6rfLWLOZoRNYjX8BEXy6h98M2hw9xBEhzWf6dMzQdid+cyfVAGdr98QhPQc2U1UWIfcsupdhwCR++A0bzI7ekvgfB0JM6sJMQPi3A+OAMf5n85+g2PHFPnCr4RLiUI8raI2XOGIBm3PzsKSMLtnuDYn/Qce9wWCD+dcjYUiYuv2G8aJiCC553pCeByr2Vzr6iZu/HgpixGJp30iG2OAPr9qduqrCkaWb6T+t8HTHaOWvm0sdCeOzy3Y5io3ho7WvrMlXG4qNVFS4ZvMsmw0Oruu0OnVVDXmCSlf/aXhKVgEP03cHDFM2vp3kgF/QtvhUc0DGX0OL7Ru+Vt8wkuksjn3TnHxRhBPTPz7Cx0fD8dRU5kto5Lc8Z1sL8LV6YO3XVHpJw4GuaYbhOZf9ci6uKKCIvmGfizFEL2va8GoDN8rl3SI7eWyocSeB2Xkqfyfrhj1NnOPB/ArmVTTP4ddmh4Yat5ncUSGePJ+0PF9eD3lHBb4MYj+19uXesP+pe85uslxsVzU0d93VaRsEQbgOguVkMrlMB7+WAFD80czw1dG/it9W4DP0Q2RZOpeRrI9sL9ktF9UUJ1EQmmbsOEmysW1Nf3SFEiaymlwYQwTUN95X4DP06SwMRaOGj7kPV1VsvtibTjKCksnBoD983pzhYQ3iHZ/LxdJPfq1lngnFOC4jElcLUUnVtfFORO35icoS/7A7Tjea9kr+Is14X9b0ljtXWJxGzI2Y+pqdWIdlVKB6tDR3lufZY0NX/yRBh6NodcFlQ/hIfO4jWZaGPc2bUQtmlTMb3dNiTiLH6H/2e9LfSlIczxsG6YtQWPWXPVAQhmHb3s4MeF5fmDMq6p3+RwDBhhYAFc+8XAn7dvAZgb/WS8DpVBAyK98yNL3/gZ4utTdnfz1eRDro9wxX5iF9Ca2X1dfEP3o30TqYg5ajqrcdBoSdDtNpuVK9j/7GzDP8PNxfpht7xM9rTD3dD7oBoj8aZAGf12rZbfJuZTklSJ/KwN5QGIqqKP2eQKMmoOTGbmsKMUYZu8xG7diPT8QRChkuJGpNtGSak5KT3fsrgDpIVM3p6lebigE2vBMSHqnv0Z7RPRSDLxINxk/I6Mq6/lOSGcWzWW4YW+ex/u4xnTK0iOwls3k6ozEcQuKf2i09TxDnm2/Dve94A/l5i/BjfvkpDEqkXtElfgBQeZr3CKVa5k6cS/YuYXkBUkzi89h4PKWGR0iwvhQeIdPz44sZlDXSqf62QwzwbStS+foof1artBMC/5I8dNSQ3q6JSH4TA2/TwGGnAmLqY27roUjtxmPdNarJLqozaxRvZi4XlZnM+WSq/toqVfTNbrcZ4Nmpx0i1nofl1+7dY6omiXaLx+vcmFGnbvmVq2i5a1Tq9sY6CB13wDL5VVRInQbZvRoVw6njO36gtr7eb2VT6eJU80dItnuyeHhaOtWaNVsKzumFwG/bRg+XlMEgiQMiwnz9c7/4zOn3JtQ3Qrc+JGbnb3mhivVSealLbQnif2vATcAeXad1qY+96H9QLll/68b6ZuZ/CXLNu6o1HNZZczoKv+hGrgYOPzSaqU3/bPCW5u54uN62ek3x6/vcp5dUo+T4NfNKH9uvZH6bMb3zA08D6izikkkaxUIhq5uH6n0BlUxkYRuanXoYorEoPAvhlTWjwzChY8DEtf09CYDSqeZmDN6ieKBLmtVaNOyxy71/uTjCAxABY4m4VjrVQO57ZqHGxU3Kt9JPJKhUfXCy/ZRWqaN5FZU1iLzjz7KxOEi1Nh3Tex6k3B917KXXf5090i18ZJFa6vt5shzKXheVOyH9Rwp/Y2L3bYf3iktN7+j9yaRK6UHV3PI6B6wjKqsgGUqGcns8TVlVnqgZrPLkxL1VU6MGluHinp9rz0vUV4BTagSWxkmGki+nB8we8sjid9G9vn7Mb4BiHTPwSFXbFerlk6/b05UAfl6+CO6aO07lkVrqyybHkyMY27KavLCRao1yij4Yr4U6N7Aoawvsh1yorEjihJXP9SePyKh58a2LA4m4HisqcGpFcSpoz1Umqvqwi8rnZZHVMwL1tvXUP5J5ntNxrWpKk+nGiu4dTEO7gLdM8HRgbcUz1fwzaxfHJq5CIU0OOwes/Ck5PSSCr01vdUicdTeGTyp2KKW2m2NqrFsv7VFk/Zxw3JBa6hu81SQf+LUrAvv03dn7Y7c0K9zRtRJbWZM9MpZswOL5/LdQOUqfqj4wtGqlWbx8Ql4Gr6eosK7XE75WVxcwydVpvE1UAoEZCfYyQ29F/Pzfkr+oJRPolLDyW0QaseHIxDZgnXGckNV1C0LvmQJTBbhxevvMOvg99DRuscsMRE+ocxAa3Sz7vCk5FbFpqr2c3EWWBGakeAiXkgqNSU09tgH3/qr6loGdYOMLnJBR6iIESu6hMFGeBCMX9+7styqXR4+ZI6ubed//KqjMDJBT4kUShj38wmWpoLlSnzJiMECOFQ6AComCXzWtJROydVgbWZKJgPrOPeofyNftrp5btDscHL9XHwb6PgaMU29HjvA0lyuMoDpFMcP4qeh2Q/fa3ALayFNWBfWVFQn5vmqodip5ny4N5YFtLQPSC2D7BJwpF+C8qu3Yc/6mMFqOJxQMLxgi0fU7QeRw1NfQFF2L1Pq4NHz205B3iyl/LGD/XJlkQU69aurHxZIotSC3eFCVu/y8Y/NQb82HsZr5cQ2YhVHJuQMuaAoT42aqUX6y6NDKwSfjdy0RNTdP/aBy7uBtEDO/0nqITM73htrQj5J1ZuGMGBdZYk0OUobbZ8NUEYlt6mEIhC8qVB7qnIQqSH4u7ZBWHVRKnjAv53t+kVdgNccngRekRr/sVLDKUX9G/HXF5MySzZCQOUaO8lefQRH0s5ga9aTwLJ8jpD6cH+MjNmmQXVyvAD7zBgdcbZBCCN5ANZMXHXJ634pVG/rcdlcmpFAiuoMCdVHZqPnbjmpIfSZ7ZV0Dk14QuWHmMsenPZcshyG/UxLcH1DpR5gKo44riHBorVqmfg8MXm5KuHiw70WmRY8dEwVnblJ1NBYsgyNjlTyn6KkbW+FEmnjw/QZoPs3vknWFPPbyiyx7P8g5rDiJMgyK+ur6GMITEPwCHZgiF6k4MhNI+bpSXzJJCCtW3ssfbJK8lAP5EDNvrSwj9FN6cVKUyhmkCdsX+4LitpglIE4a0B+53GKDMOYfAL8Nyl1XqUWR9SWTdz/oF67POT7RtsLIzYJEEd8LforLjhbK9aEYIJLSBByOykglOFK/YCZKTMTnhIiX8gHOtTgEqNhgbolBqkIGKn2MD0Ta87xPFfV2CuTfC/aMYmI2LT/b0vISInLVwV7MZNmhNMMGgM2eiyeDV1qK3EgLEtgu1zVyw+iKtrV9+4jRUrnZPJM0Fo7U54cvpXH8jPojeLTykWYDeNuudwFVzHaoDosrssrUMCU+Sp4c71O5p0kgPQQN0KglU6y9L1Ifc+lByQoH9ZBxgSdcoDuAd6vk+Q+o7xeu6VOHSUcnM7vsapaAOmPmAogNZhQgrWFJ7CsN8BNu20MjpxBcvVvUAH7PGorjhsorH3kT5tfjImZ+g+7i4/B2RZbsT3AYaB+XMmbeiWyLak7j9TNLepaqRoecbpYvpD6MJARmlXIGhoj3fbLSWMHFdUyJew1O2Fd1gGIjNbEdNk+6akvGozLqh9xjMDY9woBaSiQgftpSmTWdON3Ege3z9go8qnxWJImy6YMMXF6ljDfH+IiENCz86Cjq4wxOz40GvSMcIBCoGp/Tw9iyPfxmprxflGhAfV7u9/ZYtIddj90NnVIfkn9XWqAbMGYC7GYOn9mGuGQeb8LRT4YEGWW5800TYsDp5kSlCYGDpiqqlqBRts6zHuyZOS8JdMqJ29t6oeJOpQzdtBGuMNr8nCMx+hIpORals2AXfepMl5mkGNobFJPraBQ2bRfAgKGbY15ZQF6PcyXptLDj0ifLiE1mCaX9OuO8GCUX/Cyz0WEJF0aS24qgNW72gQ47YWGkRHKPhu2scvrjI236Ab9YpxU0M84MQ9G0z4v+KZUO60yoI58z9h0vrgZUH4gaZQ/RYIs6Itv1gj93rCPTQBJjh7zUgvoXXoXrEET91guCsEcPL0HB5skziLYiIZumRW5wcjIE+Rz6UOZCrzIwZ8S5xiw6psmy/LmDR2Crgk8WCo7QGszRBe3eHJYFmYuCLPtUHgGVZjmLEDtkkxkVBGDqXK187YSLjRfI2oGu+EkcehjlKtH2sKY6huLj6xOkM/37ULBAmTvdnPzKvkR8TOpmO0if5brUpv7il8XteTUdqZ//EEVKNtqPa8qFBGukq5tG666JF4otZzAMZ7cv3EPZlPhk1qplKHLf8GANJzwdDYxXnXxY6EwXGux44cGb4heRVRUiu7rcpzhlCRbSmlsj/VMxsKlX+YgoBihXTRutjYFDZ8UBsNQ+PtWGotxshJJ9XJuWUbS8GJvynYQhVYuslyF3voPsjfx1jL0LtqBszNA/DabCc+dpoj5a+xNky2lRgGTH2fNRiVE+cz6rdk1ZfmY5vV3RS/OAbjBZ439F7XXYFNdNPF4dyLwqBz4MkkeDW6FEKhqAsp0UE9j6Gsk5D+P8PWeweNHXt49gSc7tdJ27FFXlxXP2XWHjOEsgnrsw71XyFU7qqdzp1YqOpx4Kjvnd5jsqDn4iuixX1xI1KTZEDdmkJZk0Pp/Pm3FhVXRvsxn/5NUpmgXp7+3escW/HidxfLZLsqU32nie/f2IjJarw7GqzlgobMutzLoGuSrGJudi2ir760N2TeIWTCL+SV/GnqqqSg1/SA8tMpecgMmeaV1ZipGaa/N4LHrRiqx5uIpuXNnNzzGDxfJgNer2x/RrW3qSPhm6val4d00GeXzl3oU5m3L8q9qOz6prapv0DHVNbRYxoqbMCYTYnSqDfwuan9VKkdWXHydnx/dvJZzB5UGH2ll5HTUQTq05O9sK6NPy++XSxTh6j2ooAB64xVzD//cR4e+jrzqlM3Tu8qg98KAl9S8OMnP837Kb87NheNZxFwMux8R+sHgYX2NUpC3NWv4hUKG/YnbzIk2LdHgZIIeaSvv4XoFTh0fDysQNBMveubXt+0GLiHv1PCA21JqXz/wLGE5IdItlQwnGveMkHR4IJ58lhxMN/0asoR3QCVlksQh1/YbvKH1f9PacoO+blcddOjweHiF+LgwniQoFOzwJn1GhzPXYUf91cIr1qJUHgzo8HPqqSOuO+q+DVSracjrqvwpqWCrorTqW1eHh2JSj+R31X4YtWRUT7p3keRVGgleZd1r3VfAFHRdmjd660+HX0AMSlmpaZvyZrg7Pwll0RmDXxThfAskXnNPv77u0+kugEDIpCR6gflteBPG/hiE6N6AvurzuS3AU1StDN6GO+i/AUnRQmW6I8P/wqrvWYytyq8bU5PnJAYgO38MgEr3lyvrBMe0O38dY1H8TGiv8yeGVfw2bYt8ghHst6OzwVFgi6n8Kz9t3eDgcEfXPde8q6PA4zETUF0U9OzwBs1Jrb2xcFfz/3qnWRoiSWMKoZ4cnABK4BSnzGT62OXGHSsA5iUJbxWlXPf4qQNMs/qVI0qotb9j+B7AttESDLq+dn/sqwBnsOMf8ntumtwz/34E9DLOwgn7/NRwdHoc+NBcKroIeurh1x+VeCOzHk/YBMxZdaPm1YK9VOY103YBGTE7n5b4Ux7T3D3ZqKmfYOzwX2Ut7512E4eUYXDv/rB/9avMODTDE1shLr0ukA/4D+XMJjFok5FwAAAAASUVORK5CYII=';
       
        Map<String, Object> requestBodyMap = new Map<String, Object>{
            'plannedShippingDateAndTime' => getValueFromMdt('plannedShippingDateAndTime', shipingMetadataList, shipmentOrder, null),
            'pickup' => new Map<String, Object>{
                'isRequested' => Boolean.valueOf(getValueFromMdt('pickup.isRequested', shipingMetadataList, shipmentOrder, null))
            }, 
            'productCode' => getValueFromMdt('productCode', shipingMetadataList, shipmentOrder, null),
            'getRateEstimates' => Boolean.valueOf(getValueFromMdt('getRateEstimates', shipingMetadataList, shipmentOrder, null)),
            'accounts' => new List<Map<String, Object>>{
                new Map<String, Object>{
                    'typeCode' => getValueFromMdt('accounts[0].typeCode', shipingMetadataList, shipmentOrder, null),
                    'number' => getValueFromMdt('accounts[0].number', shipingMetadataList, shipmentOrder, null)
                }
            },
            'valueAddedServices' => new List<Map<String, Object>>{
                new Map<String, Object>{
                    'serviceCode' => getValueFromMdt('valueAddedServices[0].serviceCode', shipingMetadataList, shipmentOrder, null)
                }
            },
            'outputImageProperties' => new Map<String, Object>{
                'printerDPI' => Decimal.valueOf(getValueFromMdt('outputImageProperties.printerDPI', shipingMetadataList, shipmentOrder, null)),
                'encodingFormat' => getValueFromMdt('outputImageProperties.encodingFormat', shipingMetadataList, shipmentOrder, null),
                'imageOptions' => new List<Map<String, Object>>{
                    new Map<String, Object>{
                        'typeCode' => getValueFromMdt('outputImageProperties.imageOptions[0].typeCode', shipingMetadataList, shipmentOrder, null),
                        'invoiceType' => getValueFromMdt('outputImageProperties.imageOptions[0].invoiceType', shipingMetadataList, shipmentOrder, null),
                        'templateName' => getValueFromMdt('outputImageProperties.imageOptions[0].templateName', shipingMetadataList, shipmentOrder, null),
                        'isRequested' => Boolean.valueOf(getValueFromMdt('outputImageProperties.imageOptions[0].isRequested', shipingMetadataList, shipmentOrder, null))
                    },
                    new Map<String, Object>{
                        'typeCode' => getValueFromMdt('outputImageProperties.imageOptions[1].typeCode', shipingMetadataList, shipmentOrder, null),
                        'templateName' => getValueFromMdt('outputImageProperties.imageOptions[1].templateName', shipingMetadataList, shipmentOrder, null)
                    }
                }
            },
            'customerReferences' => new List<Map<String, Object>>{
                new Map<String, Object>{
                    'value' => getValueFromMdt('customerReferences[0].value', shipingMetadataList, shipmentOrder, null),
                    'typeCode' => getValueFromMdt('customerReferences[0].typeCode', shipingMetadataList, shipmentOrder, null)
                }
            },
            'customerDetails' => new Map<String, Object>{
                'shipperDetails' => new Map<String, Object>{
                    'postalAddress' => new Map<String, Object>{
                        'postalCode' => getValueFromMdt('customerDetails.shipperDetails.postalAddress.postalCode', shipingMetadataList, shipmentOrder, null),
                        'cityName' => getValueFromMdt('customerDetails.shipperDetails.postalAddress.cityName', shipingMetadataList, shipmentOrder, null),
                        'countryCode' => getValueFromMdt('customerDetails.shipperDetails.postalAddress.countryCode', shipingMetadataList, shipmentOrder, null),
                        'addressLine1' => getValueFromMdt('customerDetails.shipperDetails.postalAddress.addressLine1', shipingMetadataList, shipmentOrder, null)
                    },
                    'contactInformation' => new Map<String, Object>{
                        'email' => getValueFromMdt('customerDetails.shipperDetails.contactInformation.email', shipingMetadataList, shipmentOrder, null),
                        'phone' => getValueFromMdt('customerDetails.shipperDetails.contactInformation.phone', shipingMetadataList, shipmentOrder, null),
                        'companyName' => getValueFromMdt('customerDetails.shipperDetails.contactInformation.companyName', shipingMetadataList, shipmentOrder, null),
                        'fullName' => getValueFromMdt('customerDetails.shipperDetails.contactInformation.fullName', shipingMetadataList, shipmentOrder, null)
                    },
                    'registrationNumbers' => new List<Map<String, Object>>{
                        new Map<String, Object>{
                            'typeCode' => getValueFromMdt('customerDetails.shipperDetails.registrationNumbers[0].typeCode', shipingMetadataList, shipmentOrder, null),
                            'number' => getValueFromMdt('customerDetails.shipperDetails.registrationNumbers[0].number', shipingMetadataList, shipmentOrder, null),
                            'issuerCountryCode' => getValueFromMdt('customerDetails.shipperDetails.registrationNumbers[0].issuerCountryCode', shipingMetadataList, shipmentOrder, null)
                        }
                    },
                    'typeCode' => getValueFromMdt('customerDetails.shipperDetails.typeCode', shipingMetadataList, shipmentOrder, null)
                },
                'receiverDetails' => new Map<String, Object>{
                    'postalAddress' => new Map<String, Object>{
                        'postalCode' => getValueFromMdt('customerDetails.receiverDetails.postalAddress.postalCode', shipingMetadataList, shipmentOrder, null),
                        'cityName' => getValueFromMdt('customerDetails.receiverDetails.postalAddress.cityName', shipingMetadataList, shipmentOrder, null),
                        'countryCode' => getValueFromMdt('customerDetails.receiverDetails.postalAddress.countryCode', shipingMetadataList, shipmentOrder, null),
                        'provinceCode' => getValueFromMdt('customerDetails.receiverDetails.postalAddress.provinceCode', shipingMetadataList, shipmentOrder, null),
                        'addressLine1' => getValueFromMdt('customerDetails.receiverDetails.postalAddress.addressLine1', shipingMetadataList, shipmentOrder, null),
                        'addressLine2' => getValueFromMdt('customerDetails.receiverDetails.postalAddress.addressLine2', shipingMetadataList, shipmentOrder, null)
                    },
                    'contactInformation' => new Map<String, Object>{
                        'phone' => getValueFromMdt('customerDetails.receiverDetails.contactInformation.phone', shipingMetadataList, shipmentOrder, null),
                        'companyName' => getValueFromMdt('customerDetails.receiverDetails.contactInformation.companyName', shipingMetadataList, shipmentOrder, null),
                        'fullName' => getValueFromMdt('customerDetails.receiverDetails.contactInformation.fullName', shipingMetadataList, shipmentOrder, null)
                    },
                    'typeCode' => getValueFromMdt('customerDetails.receiverDetails.typeCode', shipingMetadataList, shipmentOrder, null)
                }
            },
            'content' => new Map<String, Object>{
                'packages' => new List<Map<String, Object>>{
                    new Map<String, Object>{
                        'weight' => Decimal.valueOf(getValueFromMdt('content.packages[0].weight', shipingMetadataList, shipmentOrder, null)),
                        'dimensions' => new Map<String, Object>{
                            'length' => Decimal.valueOf(getValueFromMdt('content.packages[0].dimensions.length', shipingMetadataList, shipmentOrder, null)),
                            'width' => Decimal.valueOf(getValueFromMdt('content.packages[0].dimensions.width', shipingMetadataList, shipmentOrder, null)),
                            'height' => Decimal.valueOf(getValueFromMdt('content.packages[0].dimensions.height', shipingMetadataList, shipmentOrder, null))
                        }
                    }
                },
                'isCustomsDeclarable' => true/*getValueFromMdt('content.isCustomsDeclarable', shipingMetadataList, shipmentOrder, null)*/,
                'declaredValue' =>121.140/* getValueFromMdt('content.declaredValue', shipingMetadataList, shipmentOrder, null)*/,
                'declaredValueCurrency' => getValueFromMdt('content.declaredValueCurrency', shipingMetadataList, shipmentOrder, null),
                'exportDeclaration' => new Map<String, Object>{
                    'lineItems' => new List<Map<String, Object>>{
                        new Map<String, Object>{
                            'number' => Decimal.valueOf(getValueFromMdt('content.exportDeclaration.lineItems[0].number', shipingMetadataList, shipmentOrder, null)),
                            'description' => getValueFromMdt('content.exportDeclaration.lineItems[0].description', shipingMetadataList, shipmentOrder, null),
                            'price' =>  Decimal.valueOf(getValueFromMdt('content.exportDeclaration.lineItems[0].price', shipingMetadataList, shipmentOrder, null)),
                            'priceCurrency' => getValueFromMdt('content.exportDeclaration.lineItems[0].priceCurrency', shipingMetadataList, shipmentOrder, null),
                            'quantity' => new Map<String, Object>{
                                'value' => Decimal.valueOf(getValueFromMdt('content.exportDeclaration.lineItems[0].quantity.value', shipingMetadataList, shipmentOrder, null)),
                                'unitOfMeasurement' => getValueFromMdt('content.exportDeclaration.lineItems[0].quantity.unitOfMeasurement', shipingMetadataList, shipmentOrder, null)
                            },
                            'commodityCodes' => new List<Map<String, Object>>{
                                new Map<String, Object>{
                                    'typeCode' => getValueFromMdt('content.exportDeclaration.lineItems[0].commodityCodes[0].typeCode', shipingMetadataList, shipmentOrder, null),
                                    'value' => getValueFromMdt('content.exportDeclaration.lineItems[0].commodityCodes[0].value', shipingMetadataList, shipmentOrder, null)
                                },
                                new Map<String, Object>{
                                    'typeCode' => getValueFromMdt('content.exportDeclaration.lineItems[0].commodityCodes[1].typeCode', shipingMetadataList, shipmentOrder, null),
                                    'value' => getValueFromMdt('content.exportDeclaration.lineItems[0].commodityCodes[1].value', shipingMetadataList, shipmentOrder, null)
                                }
                            },
                            'exportReasonType' => getValueFromMdt('content.exportDeclaration.lineItems[0].exportReasonType', shipingMetadataList, shipmentOrder, null),
                            'manufacturerCountry' => getValueFromMdt('content.exportDeclaration.lineItems[0].manufacturerCountry', shipingMetadataList, shipmentOrder, null),
                            'weight' => new Map<String, Object>{
                                'netValue' => Decimal.valueOf(getValueFromMdt('content.exportDeclaration.lineItems[0].weight.netValue', shipingMetadataList, shipmentOrder, null)),
                                'grossValue' => Decimal.valueOf(getValueFromMdt('content.exportDeclaration.lineItems[0].weight.grossValue', shipingMetadataList, shipmentOrder, null))
                            }
                        },
                        new Map<String, Object>{
                            'number' => Decimal.valueOf(getValueFromMdt('content.exportDeclaration.lineItems[1].number', shipingMetadataList, shipmentOrder, null)),
                            'description' => getValueFromMdt('content.exportDeclaration.lineItems[1].description', shipingMetadataList, shipmentOrder, null),
                            'price' => Decimal.valueOf(getValueFromMdt('content.exportDeclaration.lineItems[1].price', shipingMetadataList, shipmentOrder, null)),
                            'priceCurrency' => getValueFromMdt('content.exportDeclaration.lineItems[1].priceCurrency', shipingMetadataList, shipmentOrder, null),
                            'quantity' => new Map<String, Object>{
                                'value' => Decimal.valueOf(getValueFromMdt('content.exportDeclaration.lineItems[1].quantity.value', shipingMetadataList, shipmentOrder, null)),
                                'unitOfMeasurement' => getValueFromMdt('content.exportDeclaration.lineItems[1].quantity.unitOfMeasurement', shipingMetadataList, shipmentOrder, null)
                            },
                            'commodityCodes' => new List<Map<String, Object>>{
                                new Map<String, Object>{
                                    'typeCode' => getValueFromMdt('content.exportDeclaration.lineItems[1].commodityCodes[0].typeCode', shipingMetadataList, shipmentOrder, null),
                                    'value' => getValueFromMdt('content.exportDeclaration.lineItems[1].commodityCodes[0].value', shipingMetadataList, shipmentOrder, null)
                                },
                                new Map<String, Object>{
                                    'typeCode' => getValueFromMdt('content.exportDeclaration.lineItems[1].commodityCodes[1].typeCode', shipingMetadataList, shipmentOrder, null),
                                    'value' => getValueFromMdt('content.exportDeclaration.lineItems[1].commodityCodes[1].value', shipingMetadataList, shipmentOrder, null)
                                }
                            },
                            'exportReasonType' => getValueFromMdt('content.exportDeclaration.lineItems[1].exportReasonType', shipingMetadataList, shipmentOrder, null),
                            'manufacturerCountry' => getValueFromMdt('content.exportDeclaration.lineItems[1].manufacturerCountry', shipingMetadataList, shipmentOrder, null),
                            'weight' => new Map<String, Object>{
                                'netValue' => Decimal.valueOf(getValueFromMdt('content.exportDeclaration.lineItems[1].weight.netValue', shipingMetadataList, shipmentOrder, null)),
                                'grossValue' => Decimal.valueOf(getValueFromMdt('content.exportDeclaration.lineItems[1].weight.grossValue', shipingMetadataList, shipmentOrder, null))
                            }
                        },
                        new Map<String, Object>{
                            'number' => Decimal.valueOf(getValueFromMdt('content.exportDeclaration.lineItems[2].number', shipingMetadataList, shipmentOrder, null)),
                            'description' => getValueFromMdt('content.exportDeclaration.lineItems[2].description', shipingMetadataList, shipmentOrder, null),
                            'price' => Decimal.valueOf(getValueFromMdt('content.exportDeclaration.lineItems[2].price', shipingMetadataList, shipmentOrder, null)),
                            'priceCurrency' => getValueFromMdt('content.exportDeclaration.lineItems[2].priceCurrency', shipingMetadataList, shipmentOrder, null),
                            'quantity' => new Map<String, Object>{
                                'value' => Decimal.valueOf(getValueFromMdt('content.exportDeclaration.lineItems[2].quantity.value', shipingMetadataList, shipmentOrder, null)),
                                'unitOfMeasurement' => getValueFromMdt('content.exportDeclaration.lineItems[2].quantity.unitOfMeasurement', shipingMetadataList, shipmentOrder, null)
                            },
                            'commodityCodes' => new List<Map<String, Object>>{
                                new Map<String, Object>{
                                    'typeCode' => getValueFromMdt('content.exportDeclaration.lineItems[2].commodityCodes[0].typeCode', shipingMetadataList, shipmentOrder, null),
                                    'value' => getValueFromMdt('content.exportDeclaration.lineItems[2].commodityCodes[0].value', shipingMetadataList, shipmentOrder, null)
                                },
                                new Map<String, Object>{
                                    'typeCode' => getValueFromMdt('content.exportDeclaration.lineItems[2].commodityCodes[1].typeCode', shipingMetadataList, shipmentOrder, null),
                                    'value' => getValueFromMdt('content.exportDeclaration.lineItems[2].commodityCodes[1].value', shipingMetadataList, shipmentOrder, null)
                                }
                            },
                            'exportReasonType' => getValueFromMdt('content.exportDeclaration.lineItems[2].exportReasonType', shipingMetadataList, shipmentOrder, null),
                            'manufacturerCountry' => getValueFromMdt('content.exportDeclaration.lineItems[2].manufacturerCountry', shipingMetadataList, shipmentOrder, null),
                            'weight' => new Map<String, Object>{
                                'netValue' => Decimal.valueOf(getValueFromMdt('content.exportDeclaration.lineItems[2].weight.netValue', shipingMetadataList, shipmentOrder, null)),
                                'grossValue' => Decimal.valueOf(getValueFromMdt('content.exportDeclaration.lineItems[2].weight.grossValue', shipingMetadataList, shipmentOrder, null))
                            }
                        }
                    },
                    'invoice' => new Map<String, Object>{
                    'number' => getValueFromMdt('content.invoice.number', shipingMetadataList, shipmentOrder, null),
                    'date' => getValueFromMdt('content.invoice.date', shipingMetadataList, shipmentOrder, null),
                    'signatureName' => getValueFromMdt('content.invoice.signatureName', shipingMetadataList, shipmentOrder, null),
                    'signatureTitle' => getValueFromMdt('content.invoice.signatureTitle', shipingMetadataList, shipmentOrder, null),
                    'signatureImage' => signatureText
                },
                    'additionalCharges' => new List<Map<String, Object>>{
                        new Map<String, Object>{
                            'value' => Decimal.valueOf(getValueFromMdt('content.additionalCharges[0].value', shipingMetadataList, shipmentOrder, null)),
                            'caption' => getValueFromMdt('content.additionalCharges[0].caption', shipingMetadataList, shipmentOrder, null),
                            'typeCode' => getValueFromMdt('content.additionalCharges[0].typeCode', shipingMetadataList, shipmentOrder, null)
                        },
                        new Map<String, Object>{
                            'value' => Decimal.valueOf(getValueFromMdt('content.additionalCharges[1].value', shipingMetadataList, shipmentOrder, null)),
                            'caption' => getValueFromMdt('content.additionalCharges[1].caption', shipingMetadataList, shipmentOrder, null),
                            'typeCode' => getValueFromMdt('content.additionalCharges[1].typeCode', shipingMetadataList, shipmentOrder, null)
                        }
                    }
                },
                'description' => getValueFromMdt('content.description', shipingMetadataList, shipmentOrder, null),
                'incoterm' => getValueFromMdt('content.incoterm', shipingMetadataList, shipmentOrder, null),
                'unitOfMeasurement' => getValueFromMdt('content.unitOfMeasurement', shipingMetadataList, shipmentOrder, null)
            },
            'documentImages' => new List<Map<String, Object>>{
                new Map<String, Object>{
                    'typeCode' => getValueFromMdt('documentImages[0].typeCode', shipingMetadataList, shipmentOrder, null),
                    'imageFormat' => getValueFromMdt('documentImages[0].imageFormat', shipingMetadataList, shipmentOrder, null),
                    'content' => contentText
                }
            },
            'requestOndemandDeliveryURL' => Boolean.valueOf(getValueFromMdt('requestOndemandDeliveryURL', shipingMetadataList, shipmentOrder, null)),
            'getOptionalInformation' => Boolean.valueOf(getValueFromMdt('getOptionalInformation', shipingMetadataList, shipmentOrder, null))
        };
        
        String requestBody = JSON.serialize(requestBodyMap);
		System.debug('@@' + requestBody);
		return requestBody;
    
    }

    public HttpResponse callWebService (String requestBody) {
		HttpRequestApiCreateLabel.addHeader('Content-Type', 'application/json'); 
		HTTPResponse responseHttp = HttpRequestApiCreateLabel.postData('callout:Dhl', requestBody);
        String response = responseHttp.getBody();
        System.debug(response);
		return responseHttp; 
	}

    public void processResponse(HttpResponse responseHttp, List<Shipment> shipmentOrder, String shipmentId) {
        String response = responseHttp.getBody();

        if(responseHttp.getStatusCode() == 201) {
		    String startTagLabel = '"content":';
		    String endTagLabel = '"typeCode"';
		    SubstringMessage extractValueLabel = new SubstringMessage(response, startTagLabel, endTagLabel); 
            String valueLabel = extractValueLabel.extractedError;
            String messageToEncoding = valueLabel.replace('"', '').replace(',', '').replace(':', '');
            System.debug(messageToEncoding);
            Blob pdfBlob = EncodingUtil.base64Decode(messageToEncoding);

            String startTagTracking = '"trackingNumber":';
		    String endTagTracking = '"trackingUrl"';
		    SubstringMessage extractTracking = new SubstringMessage(response, startTagTracking, endTagTracking); 
            String valueTrackingNumber = extractTracking.extractedError;
            String trackingNumber = valueTrackingNumber.replace('"', '').replace(',', '').replace(':', '');
            System.debug('@@trackingNumber' + trackingNumber);

            String startTagUrlTracking = '"trackingUrl":';
		    String endTagUrlTracking = '"packages"';
		    SubstringMessage extractUrlTracking = new SubstringMessage(response, startTagUrlTracking, endTagUrlTracking); 
            String valueUrlTrackingNumber = extractUrlTracking.extractedError;
            String urlTrackingNumber = valueUrlTrackingNumber.replace('"', '').replace(',', '').replace(':', '');
            System.debug('urlTrackingNumber' + urlTrackingNumber);

            ContentVersion cv = new ContentVersion();
            cv.Title = 'DHL Label shipment';
            cv.PathOnClient = 'DHLLabel.pdf';
            cv.VersionData = pdfBlob;
            cv.IsMajorVersion = true; 
            cv.FirstPublishLocationId = shipmentId; 
            insert cv; 

		    shipmentOrder[0].TrackingNumber = trackingNumber;
		    shipmentOrder[0].TrackingUrl = urlTrackingNumber;
		    upsert shipmentOrder;
            Logs.infoShipment('Shipment', 'Create label dhl', responseHttp, response);
        } else {
            String startTagError = '"detail":';
		    String endTagError = '"title"';
		    SubstringMessage extractError = new SubstringMessage(response, startTagError, endTagError); 
            String valueError = extractError.extractedError;
            String messageError = valueError.replace('"', '').replace(',', '').replace(':', '');
            Logs.infoShipment('Shipment', 'Create label dhl', responseHttp, response);
            System.debug(messageError);
        }
    }
}